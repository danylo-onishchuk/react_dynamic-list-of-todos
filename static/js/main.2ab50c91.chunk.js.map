{"version":3,"sources":["components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","api.js","App.jsx","index.js"],"names":["classNames","require","TodoList","state","searchValue","selectorValue","handleChange","e","props","todosVisible","filtered","elementTodo","find","todo","id","target","completed","this","selectUser","search","shuffle","className","type","placeholder","value","onChange","setState","onClick","map","key","checked","title","name","userId","React","Component","CurrentUser","user","clear","email","phone","getUsers","fetch","then","response","json","App","allTodos","selectedUserId","errorData","filterInfo","needUser","data","visible","filter","toLowerCase","includes","needTodos","randomList","i","length","random","Math","floor","a","result","todos","hidden","ReactDOM","render","document","getElementById"],"mappings":"oWAKMA,G,kBAAaC,EAAQ,KAEdC,EAAb,4MACEC,MAAQ,CACNC,YAAa,GACbC,cAAe,OAHnB,EAMEC,aAAe,SAACC,GAAO,IAAD,EACe,EAAKC,MAAhCC,EADY,EACZA,aAAcC,EADF,EACEA,SACdL,EAAkB,EAAKF,MAAvBE,cACFM,EAAcF,EAAaG,MAAK,SAAAC,GAAI,OAAIA,EAAKC,MAAQP,EAAEQ,OAAOD,MAEpEH,EAAYK,WAAaL,EAAYK,UACrCN,EAASL,IAZb,4CAeE,WAAU,IAAD,SACyDY,KAAKT,MAA7DC,EADD,EACCA,aAAcS,EADf,EACeA,WAAYC,EAD3B,EAC2BA,OAAQT,EADnC,EACmCA,SAAUU,EAD7C,EAC6CA,QAC5ChB,EAAgBa,KAAKd,MAArBC,YAER,OACE,yBAAKiB,UAAU,YACb,sCACA,2BACEC,KAAK,OACLC,YAAY,kBACZC,MAAOpB,EACPqB,SAAU,SAAClB,GACT,EAAKmB,SAAS,CAAEtB,YAAaG,EAAEQ,OAAOS,QACtCL,EAAOZ,EAAEQ,OAAOS,UAGpB,4BACEC,SAAU,SAAClB,GACT,EAAKmB,SAAS,CAAErB,cAAeE,EAAEQ,OAAOS,QACxCd,EAASH,EAAEQ,OAAOS,SAGpB,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,aAAd,cAEF,4BACEF,KAAK,SACLK,QAASP,GAFX,cAMA,yBAAKC,UAAU,4BACb,wBAAIA,UAAU,kBACXZ,EAAamB,KAAI,SAAAf,GAAI,OACpB,wBACEQ,UAAWrB,EAAW,iBAAkB,CACtC,6BAA8Ba,EAAKG,UACnC,0BAA2BH,EAAKG,YAElCa,IAAKhB,EAAKC,IAEV,+BACE,2BACEA,GAAID,EAAKC,GACTQ,KAAK,WACLQ,QAASjB,EAAKG,UACdS,SAAU,EAAKnB,eAEjB,2BAAIO,EAAKkB,QAEX,4BACEC,KAAMnB,EAAKoB,OACXZ,UAAU,iEAKVC,KAAK,SACLK,QAAS,SAACpB,GACRW,EAAWX,EAAEQ,OAAOiB,QATxB,YAaGnB,EAAKoB,mBA/ExB,GAA8BC,IAAMC,WCFvBC,G,MAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAT,OACzB,yBAAKjB,UAAU,eACb,wBAAIA,UAAU,sBACZ,oDAGGgB,EAAKvB,KAIV,wBAAIO,UAAU,qBAAqBgB,EAAKL,MACxC,uBAAGX,UAAU,sBAAsBgB,EAAKE,OACxC,uBAAGlB,UAAU,sBAAsBgB,EAAKG,OACxC,4BACElB,KAAK,SACLD,UAAU,sCACVM,QAASW,GAHX,YCPG,SAASG,EAASR,GACvB,OAAOS,MAAM,wCAAD,OAAyCT,IAClDU,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UCJxB,IAAMC,EAAb,4MACE3C,MAAQ,CACN4C,SAAU,GACVtC,aAAc,GACduC,eAAgB,EAChBX,KAAM,GACNY,WAAW,EACX7C,YAAa,GACb8C,WAAY,OARhB,EAmBEhC,WAAa,SAACe,GAAY,IAChBe,EAAmB,EAAK7C,MAAxB6C,eAEJf,IAAWe,GACbP,EAASR,GACNU,MAAK,SAACQ,GACiB,OAAlBA,EAASC,KACX,EAAK1B,SAAS,CACZW,KAAMc,EAASC,KACfJ,eAAgBf,EAChBgB,WAAW,IAGb,EAAKvB,SAAS,CACZsB,eAAgB,EAChBC,WAAW,QAlCzB,EAyCEX,MAAQ,WACN,EAAKZ,SAAS,CACZsB,eAAgB,EAChBX,KAAM,MA5CZ,EAgDElB,OAAS,SAACK,GAAW,IACX0B,EAAe,EAAK/C,MAApB+C,WAEFG,EADY,EAAK3C,SAASwC,GACNI,QAAO,SAAAzC,GAAI,OACnCA,EAAKkB,MAAMwB,cAAcC,SAAShC,EAAM+B,kBAG1C,EAAK7B,SAAS,CACZjB,aAAc4C,EACdjD,YAAaoB,KAzDnB,EA6DEd,SAAW,SAACc,GAAW,IAKjB6B,EALgB,EACc,EAAKlD,MAA/B4C,EADY,EACZA,SAAU3C,EADE,EACFA,YACZqD,EAAYV,EAASO,QAAO,SAAAzC,GAAI,OACpCA,EAAKkB,MAAMwB,cAAcC,SAASpD,EAAYmD,kBAyBhD,MArBc,cAAV/B,IACF6B,EAAUI,EAAUH,QAAO,SAAAzC,GAAI,OACV,IAAnBA,EAAKG,cAIK,WAAVQ,IACF6B,EAAUI,EAAUH,QAAO,SAAAzC,GAAI,OACV,IAAnBA,EAAKG,cAIK,QAAVQ,IACF6B,EAAUI,GAGZ,EAAK/B,SAAS,CACZjB,aAAc4C,EACdH,WAAY1B,IAGP6B,GAzFX,EA4FEjC,QAAU,WAIR,IAJe,IAETsC,EADmB,EAAKvD,MAAtBM,aAGCkD,EAAID,EAAWE,OAAS,EAAGD,EAAI,EAAGA,GAAK,EAAG,CACjD,IAAME,EAASC,KAAKC,MAAMD,KAAKD,UAAYF,EAAI,IADE,EAGX,CAACD,EAAWG,GAASH,EAAWC,IAArED,EAAWC,GAHqC,KAGjCD,EAAWG,GAHsB,KAMnD,EAAKnC,SAAS,CAAEjB,aAAciD,KAtGlC,8FAWE,iCAAAM,EAAA,sEDnBOtB,MAAM,wCACVC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAsB,GAAM,OAAIA,EAAOb,KAAKE,QAAO,SAAAzC,GAAI,OACtB,OAAfA,EAAKkB,OACa,KAAflB,EAAKkB,OACW,OAAhBlB,EAAKoB,QACc,OAAnBpB,EAAKG,gBCeP2B,MAAK,SAAAuB,GAAK,OAAI,EAAKxC,SAAS,CAC3BqB,SAAUmB,EACVzD,aAAcyD,OAJpB,2CAXF,0EAyGE,WAAU,IAAD,EACmDjD,KAAKd,MAAvDM,EADD,EACCA,aAAcuC,EADf,EACeA,eAAgBX,EAD/B,EAC+BA,KAAMY,EADrC,EACqCA,UAE5C,OACE,yBAAK5B,UAAU,OACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEZ,aAAcA,EACdS,WAAYD,KAAKC,WACjBC,OAAQF,KAAKE,OACbT,SAAUO,KAAKP,SACfU,QAASH,KAAKG,WAIlB,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,0BACZ2B,EACC,kBAAC,EAAD,CACEX,KAAMA,EACNC,MAAOrB,KAAKqB,QAEZ,mBACJ,uBAAG6B,OAAQlB,GAAX,wBAhIZ,GAAyBf,IAAMC,WCL/BiC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.2ab50c91.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './TodoList.scss';\n\nconst classNames = require('classnames');\n\nexport class TodoList extends React.Component {\n  state = {\n    searchValue: '',\n    selectorValue: 'all',\n  }\n\n  handleChange = (e) => {\n    const { todosVisible, filtered } = this.props;\n    const { selectorValue } = this.state;\n    const elementTodo = todosVisible.find(todo => todo.id === +e.target.id);\n\n    elementTodo.completed = !elementTodo.completed;\n    filtered(selectorValue);\n  }\n\n  render() {\n    const { todosVisible, selectUser, search, filtered, shuffle } = this.props;\n    const { searchValue } = this.state;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <input\n          type=\"text\"\n          placeholder=\"Search by title\"\n          value={searchValue}\n          onChange={(e) => {\n            this.setState({ searchValue: e.target.value });\n            search(e.target.value);\n          }}\n        />\n        <select\n          onChange={(e) => {\n            this.setState({ selectorValue: e.target.value });\n            filtered(e.target.value);\n          }}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n        <button\n          type=\"button\"\n          onClick={shuffle}\n        >\n          Random it!\n        </button>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todosVisible.map(todo => (\n              <li\n                className={classNames('TodoList__item', {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                })}\n                key={todo.id}\n              >\n                <label>\n                  <input\n                    id={todo.id}\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    onChange={this.handleChange}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n                <button\n                  name={todo.userId}\n                  className=\"\n               TodoList__user-button\n               TodoList__user-button--selected\n               button\n             \"\n                  type=\"button\"\n                  onClick={(e) => {\n                    selectUser(e.target.name);\n                  }}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todosVisible: PropTypes.arrayOf(\n    PropTypes.shape({\n      completed: PropTypes.bool.isRequired,\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  search: PropTypes.func.isRequired,\n  filtered: PropTypes.func.isRequired,\n  selectUser: PropTypes.func.isRequired,\n  shuffle: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './CurrentUser.scss';\n\nexport const CurrentUser = ({ user, clear }) => (\n  <div className=\"CurrentUser\">\n    <h2 className=\"CurrentUser__title\">\n      <span>\n        Selected user:\n        &nbsp;\n        {user.id}\n      </span>\n    </h2>\n\n    <h3 className=\"CurrentUser__name\">{user.name}</h3>\n    <p className=\"CurrentUser__email\">{user.email}</p>\n    <p className=\"CurrentUser__phone\">{user.phone}</p>\n    <button\n      type=\"button\"\n      className=\"btn btn-primary CurrentUser__button\"\n      onClick={clear}\n    >\n      Clear\n    </button>\n  </div>\n);\n\nCurrentUser.propTypes = {\n  user: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n  }).isRequired,\n  clear: PropTypes.func.isRequired,\n};\n","export function getTodos() {\n  return fetch(`https://mate-api.herokuapp.com/todos`)\n    .then(response => response.json())\n    .then(result => result.data.filter(todo => (\n      todo.title !== null\n      && todo.title !== ''\n      && todo.userId !== null\n      && todo.completed !== null\n    )));\n}\n\nexport function getUsers(userId) {\n  return fetch(`https://mate-api.herokuapp.com/users/${userId}`)\n    .then(response => response.json());\n}\n","import React from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos, getUsers } from './api';\n\nexport class App extends React.Component {\n  state = {\n    allTodos: [],\n    todosVisible: [],\n    selectedUserId: 0,\n    user: {},\n    errorData: true,\n    searchValue: '',\n    filterInfo: 'all',\n  };\n\n  async componentDidMount() {\n    await getTodos()\n      .then(todos => this.setState({\n        allTodos: todos,\n        todosVisible: todos,\n      }));\n  }\n\n  selectUser = (userId) => {\n    const { selectedUserId } = this.state;\n\n    if (userId !== selectedUserId) {\n      getUsers(userId)\n        .then((needUser) => {\n          if (needUser.data !== null) {\n            this.setState({\n              user: needUser.data,\n              selectedUserId: userId,\n              errorData: true,\n            });\n          } else {\n            this.setState({\n              selectedUserId: 0,\n              errorData: false,\n            });\n          }\n        });\n    }\n  }\n\n  clear = () => {\n    this.setState({\n      selectedUserId: 0,\n      user: {},\n    });\n  }\n\n  search = (value) => {\n    const { filterInfo } = this.state;\n    const needTodos = this.filtered(filterInfo);\n    const visible = needTodos.filter(todo => (\n      todo.title.toLowerCase().includes(value.toLowerCase())\n    ));\n\n    this.setState({\n      todosVisible: visible,\n      searchValue: value,\n    });\n  }\n\n  filtered = (value) => {\n    const { allTodos, searchValue } = this.state;\n    const needTodos = allTodos.filter(todo => (\n      todo.title.toLowerCase().includes(searchValue.toLowerCase())\n    ));\n    let visible;\n\n    if (value === 'completed') {\n      visible = needTodos.filter(todo => (\n        todo.completed === true\n      ));\n    }\n\n    if (value === 'active') {\n      visible = needTodos.filter(todo => (\n        todo.completed === false\n      ));\n    }\n\n    if (value === 'all') {\n      visible = needTodos;\n    }\n\n    this.setState({\n      todosVisible: visible,\n      filterInfo: value,\n    });\n\n    return visible;\n  }\n\n  shuffle = () => {\n    const { todosVisible } = this.state;\n    const randomList = todosVisible;\n\n    for (let i = randomList.length - 1; i > 0; i -= 1) {\n      const random = Math.floor(Math.random() * (i + 1));\n      // eslint-disable-next-line\n      [randomList[i], randomList[random]] = [randomList[random], randomList[i]];\n    }\n\n    this.setState({ todosVisible: randomList });\n  }\n\n  render() {\n    const { todosVisible, selectedUserId, user, errorData } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todosVisible={todosVisible}\n            selectUser={this.selectUser}\n            search={this.search}\n            filtered={this.filtered}\n            shuffle={this.shuffle}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                user={user}\n                clear={this.clear}\n              />\n            ) : 'No user selected'}\n            <p hidden={errorData}>\n              No such user!\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}